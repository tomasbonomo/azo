package com.uade.tpo.deportes.patterns.observer;

import com.uade.tpo.deportes.entity.Partido;
import com.uade.tpo.deportes.entity.Usuario;
import com.uade.tpo.deportes.enums.EventoPartido;
import com.uade.tpo.deportes.patterns.adapter.NotificadorEmail;
import com.uade.tpo.deportes.patterns.adapter.NotificadorPush;
import com.uade.tpo.deportes.repository.UsuarioRepository;
import com.uade.tpo.deportes.service.pushtoken.PushTokenService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Observer completo para notificaciones - VERSI√ìN SIMPLIFICADA
 * Sin dependencias complejas por ahora
 */
@Component
public class NotificadorCompletoObserver implements ObserverPartido {

    @Autowired
    private NotificadorEmail notificadorEmail;
    
    @Autowired
    private NotificadorPush notificadorPush;
    
    @Autowired
    private UsuarioRepository usuarioRepository;
    
    @Autowired
    private PushTokenService pushTokenService;

    @Override
    public void actualizar(Partido partido, EventoPartido evento) {
        try {
            System.out.println("üîî Procesando notificaci√≥n: " + evento + " para partido " + partido.getId());
            
            switch (evento) {
                case PARTIDO_CREADO:
                    manejarPartidoCreado(partido);
                    break;
                case PARTIDO_ARMADO:
                    manejarPartidoArmado(partido);
                    break;
                case PARTIDO_CONFIRMADO:
                    manejarPartidoConfirmado(partido);
                    break;
                case PARTIDO_INICIADO:
                    manejarPartidoIniciado(partido);
                    break;
                case PARTIDO_FINALIZADO:
                    manejarPartidoFinalizado(partido);
                    break;
                case PARTIDO_CANCELADO:
                    manejarPartidoCancelado(partido);
                    break;
                default:
                    System.out.println("üîî Evento no manejado: " + evento);
            }
        } catch (Exception e) {
            System.err.println("‚ùå Error procesando notificaci√≥n para evento " + evento + ": " + e.getMessage());
            e.printStackTrace();
        }
    }

    // ‚úÖ CASO 1: Notificar cuando se crea un partido nuevo para deporte favorito
    private void manejarPartidoCreado(Partido partido) {
        System.out.println("üÜï Procesando notificaciones para partido creado: " + partido.getId());
        
        try {
            // Obtener usuarios con este deporte como favorito (excepto el organizador)
            List<Usuario> usuariosInteresados = usuarioRepository
                .findByDeporteFavoritoAndActivoTrue(partido.getDeporte().getTipo())
                .stream()
                .filter(usuario -> !usuario.getId().equals(partido.getOrganizador().getId()))
                .filter(Usuario::isActivo)
                .collect(Collectors.toList());

            String mensaje = construirMensajePartidoCreado(partido);
            String asunto = "üÜï Nuevo partido de " + partido.getDeporte().getNombre();

            // Enviar notificaciones
            enviarNotificacionesAUsuarios(usuariosInteresados, asunto, mensaje);

            System.out.println("‚úÖ Notificaciones enviadas a " + usuariosInteresados.size() + 
                              " usuarios interesados en " + partido.getDeporte().getNombre());
        } catch (Exception e) {
            System.err.println("‚ùå Error en manejarPartidoCreado: " + e.getMessage());
        }
    }

    // ‚úÖ CASO 2: Notificar cuando el partido pasa a "Partido armado"
    private void manejarPartidoArmado(Partido partido) {
        System.out.println("‚úÖ Procesando notificaciones para partido armado: " + partido.getId());
        
        try {
            String mensaje = construirMensajePartidoArmado(partido);
            String asunto = "‚úÖ Partido completo - " + partido.getDeporte().getNombre();

            // Notificar a todos los jugadores y organizador
            List<Usuario> participantes = obtenerTodosLosParticipantes(partido);
            enviarNotificacionesAUsuarios(participantes, asunto, mensaje);

            System.out.println("‚úÖ Notificaciones de partido armado enviadas a " + participantes.size() + " participantes");
        } catch (Exception e) {
            System.err.println("‚ùå Error en manejarPartidoArmado: " + e.getMessage());
        }
    }

    // ‚úÖ CASO 3: Notificar cuando se confirma el partido
    private void manejarPartidoConfirmado(Partido partido) {
        System.out.println("üéØ Procesando notificaciones para partido confirmado: " + partido.getId());
        
        try {
            String mensaje = construirMensajePartidoConfirmado(partido);
            String asunto = "üéØ Partido confirmado - " + partido.getDeporte().getNombre();

            List<Usuario> participantes = obtenerTodosLosParticipantes(partido);
            enviarNotificacionesAUsuarios(participantes, asunto, mensaje);

            System.out.println("‚úÖ Notificaciones de confirmaci√≥n enviadas a " + participantes.size() + " participantes");
        } catch (Exception e) {
            System.err.println("‚ùå Error en manejarPartidoConfirmado: " + e.getMessage());
        }
    }

    // ‚úÖ CASO 4: Notificar cuando el partido pasa a "En juego"
    private void manejarPartidoIniciado(Partido partido) {
        System.out.println("üèÉ‚Äç‚ôÇÔ∏è Procesando notificaciones para partido iniciado: " + partido.getId());
        
        try {
            String mensaje = construirMensajePartidoIniciado(partido);
            String asunto = "üèÉ‚Äç‚ôÇÔ∏è ¬°Tu partido ha comenzado!";

            List<Usuario> participantes = obtenerTodosLosParticipantes(partido);
            enviarNotificacionesAUsuarios(participantes, asunto, mensaje);

            System.out.println("‚úÖ Notificaciones de inicio enviadas a " + participantes.size() + " participantes");
        } catch (Exception e) {
            System.err.println("‚ùå Error en manejarPartidoIniciado: " + e.getMessage());
        }
    }

    // ‚úÖ CASO 5: Notificar cuando el partido se finaliza
    private void manejarPartidoFinalizado(Partido partido) {
        System.out.println("üèÜ Procesando notificaciones para partido finalizado: " + partido.getId());
        
        try {
            String mensaje = construirMensajePartidoFinalizado(partido);
            String asunto = "üèÜ Partido finalizado - ¬°Gracias por participar!";

            List<Usuario> participantes = obtenerTodosLosParticipantes(partido);
            enviarNotificacionesAUsuarios(participantes, asunto, mensaje);

            System.out.println("‚úÖ Notificaciones de finalizaci√≥n enviadas a " + participantes.size() + " participantes");
        } catch (Exception e) {
            System.err.println("‚ùå Error en manejarPartidoFinalizado: " + e.getMessage());
        }
    }

    // ‚úÖ CASO 6: Notificar cuando el partido se cancela
    private void manejarPartidoCancelado(Partido partido) {
        System.out.println("‚ùå Procesando notificaciones para partido cancelado: " + partido.getId());
        
        try {
            String mensaje = construirMensajePartidoCancelado(partido);
            String asunto = "‚ùå Partido cancelado - " + partido.getDeporte().getNombre();

            List<Usuario> participantes = obtenerTodosLosParticipantes(partido);
            enviarNotificacionesAUsuarios(participantes, asunto, mensaje);

            System.out.println("‚úÖ Notificaciones de cancelaci√≥n enviadas a " + participantes.size() + " participantes");
        } catch (Exception e) {
            System.err.println("‚ùå Error en manejarPartidoCancelado: " + e.getMessage());
        }
    }

    // ===== M√âTODOS AUXILIARES =====

    private void enviarNotificacionesAUsuarios(List<Usuario> usuarios, String asunto, String mensaje) {
        if (usuarios.isEmpty()) {
            System.out.println("‚ÑπÔ∏è No hay usuarios para notificar");
            return;
        }

        for (Usuario usuario : usuarios) {
            try {
                // Enviar email
                notificadorEmail.enviarNotificacion(usuario.getEmail(), mensaje);
                
                // Enviar push notification
                List<String> tokens = pushTokenService.obtenerTokensUsuario(usuario.getId());
                if (!tokens.isEmpty()) {
                    for (String token : tokens) {
                        notificadorPush.enviarNotificacionPush(token, mensaje);
                    }
                } else {
                    System.out.println("‚ö†Ô∏è Usuario " + usuario.getNombreUsuario() + " no tiene tokens push registrados");
                }
                
            } catch (Exception e) {
                System.err.println("‚ùå Error enviando notificaci√≥n a " + usuario.getEmail() + ": " + e.getMessage());
            }
        }
    }

    private List<Usuario> obtenerTodosLosParticipantes(Partido partido) {
        List<Usuario> participantes = new ArrayList<>();
        
        // Agregar jugadores activos
        if (partido.getParticipantes() != null) {
            participantes.addAll(partido.getParticipantes().stream()
                .filter(Usuario::isActivo)
                .collect(Collectors.toList()));
        }
        
        // Agregar organizador si no est√° en la lista
        if (partido.getOrganizador() != null && !participantes.contains(partido.getOrganizador())) {
            participantes.add(partido.getOrganizador());
        }
        
        return participantes;
    }

    // M√©todos para construir mensajes espec√≠ficos...

    private String construirMensajePartidoCreado(Partido partido) {
        return String.format(
            "¬°Se ha creado un nuevo partido de %s!\n\n" +
            "üìç Ubicaci√≥n: %s\n" +
            "üïê Horario: %s\n" +
            "üë• Jugadores necesarios: %d\n" +
            "üéØ Organizador: %s\n\n" +
            "¬°√önete ahora desde la app!",
            partido.getDeporte().getNombre(),
            partido.getUbicacion().getDireccion(),
            partido.getHorario().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")),
            partido.getCantidadJugadoresRequeridos(),
            partido.getOrganizador().getNombreUsuario()
        );
    }

    private String construirMensajePartidoArmado(Partido partido) {
        return String.format(
            "¬°Excelente! El partido de %s ya tiene suficientes jugadores.\n\n" +
            "üìç Ubicaci√≥n: %s\n" +
            "üïê Horario: %s\n" +
            "üë• Jugadores confirmados: %d/%d\n\n" +
            "Esperando confirmaci√≥n final del organizador.",
            partido.getDeporte().getNombre(),
            partido.getUbicacion().getDireccion(),
            partido.getHorario().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")),
            partido.getCantidadJugadoresRequeridos(),
            partido.getCantidadJugadoresRequeridos()
        );
    }

    private String construirMensajePartidoConfirmado(Partido partido) {
        return String.format(
            "üéØ ¬°Tu partido de %s est√° oficialmente confirmado!\n\n" +
            "üìç Ubicaci√≥n: %s\n" +
            "üïê Horario: %s\n" +
            "üë• Jugadores: %d\n\n" +
            "¬°Nos vemos en la cancha!",
            partido.getDeporte().getNombre(),
            partido.getUbicacion().getDireccion(),
            partido.getHorario().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")),
            partido.getCantidadJugadoresRequeridos()
        );
    }

    private String construirMensajePartidoIniciado(Partido partido) {
        return String.format(
            "üèÉ‚Äç‚ôÇÔ∏è ¬°Tu partido de %s ha comenzado!\n\n" +
            "üìç Ubicaci√≥n: %s\n" +
            "üë• Jugadores: %d\n\n" +
            "¬°Que tengas un excelente partido!",
            partido.getDeporte().getNombre(),
            partido.getUbicacion().getDireccion(),
            partido.getCantidadJugadoresRequeridos()
        );
    }

    private String construirMensajePartidoFinalizado(Partido partido) {
        return String.format(
            "üèÜ El partido de %s ha finalizado.\n\n" +
            "¬°Esperamos que hayas tenido una gran experiencia!\n\n" +
            "üì± No olvides calificar tu experiencia en la app.\n" +
            "üîÑ ¬°Busca tu pr√≥ximo partido en UnoMas!",
            partido.getDeporte().getNombre()
        );
    }

    private String construirMensajePartidoCancelado(Partido partido) {
        return String.format(
            "‚ùå Lamentamos informarte que el partido de %s ha sido cancelado.\n\n" +
            "üìç Ubicaci√≥n: %s\n" +
            "üïê Horario original: %s\n\n" +
            "üîÑ Busca otros partidos disponibles en UnoMas.",
            partido.getDeporte().getNombre(),
            partido.getUbicacion().getDireccion(),
            partido.getHorario().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"))
        );
    }
}